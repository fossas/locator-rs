use locator::{Constraints, Fetcher, Revision};
use simple_test_case::test_case;

#[test_case(Fetcher::Cargo, "=1.2.3", "1.2.3", true; "cargo_eq1.2.3_includes_1.2.3")]
#[test_case(Fetcher::Cargo, "=1.2.3", "1.2.4", false; "cargo_eq1.2.3_excludes_1.2.4")]
#[test_case(Fetcher::Cargo, "=1.2", "1.2.3", true; "cargo_eq1.2_includes_1.2.3")]
#[test_case(Fetcher::Cargo, "=1.2", "1.3.0", false; "cargo_eq1.2_excludes_1.3.0")]
#[test_case(Fetcher::Cargo, "=1", "1.2.3", true; "cargo_eq1_includes_1.2.3")]
#[test_case(Fetcher::Cargo, "=1", "2.0.0", false; "cargo_eq1_excludes_2.0.0")]
#[test_case(Fetcher::Cargo, ">1.2.3", "1.2.4", true; "cargo_gt1.2.3_includes_1.2.4")]
#[test_case(Fetcher::Cargo, ">1.2.3", "1.2.2", false; "cargo_gt1.2.3_excludes_1.2.2")]
#[test_case(Fetcher::Cargo, ">1.2", "1.3.0", true; "cargo_gt1.2_includes_1.3.0")]
#[test_case(Fetcher::Cargo, ">1.2", "1.2.3", false; "cargo_gt1.2_excludes_1.2.3")]
#[test_case(Fetcher::Cargo, ">1", "2.0.0", true; "cargo_gt1_includes_2.0.0")]
#[test_case(Fetcher::Cargo, ">1", "1.2.3", false; "cargo_gt1_excludes_1.2.3")]
#[test_case(Fetcher::Cargo, ">=1.2.3", "1.2.4", true; "cargo_gte1.2.3_includes_1.2.4")]
#[test_case(Fetcher::Cargo, ">=1.2.3", "1.2.2", false; "cargo_gte1.2.3_excludes_1.2.2")]
#[test_case(Fetcher::Cargo, ">=1.2", "1.3.0", true; "cargo_gte1.2_includes_1.3.0")]
#[test_case(Fetcher::Cargo, ">=1.2", "1.1.3", false; "cargo_gte1.2_excludes_1.1.3")]
#[test_case(Fetcher::Cargo, ">=1", "2.0.0", true; "cargo_gte1_includes_2.0.0")]
#[test_case(Fetcher::Cargo, ">=1", "0.9.9", false; "cargo_gte1_excludes_0.9.9")]
#[test_case(Fetcher::Cargo, "<=1.2.3", "1.2.3", true; "cargo_lte1.2.3_includes_1.2.3")]
#[test_case(Fetcher::Cargo, "<=1.2.3", "1.2.4", false; "cargo_lte1.2.3_excludes_1.2.4")]
#[test_case(Fetcher::Cargo, "<=1.2", "1.2.9", true; "cargo_lte1.2_includes_1.2.9")]
#[test_case(Fetcher::Cargo, "<=1.2", "1.3.0", false; "cargo_lte1.2_excludes_1.3.0")]
#[test_case(Fetcher::Cargo, "<=1", "1.9.9", true; "cargo_lte1_includes_1.9.9")]
#[test_case(Fetcher::Cargo, "<=1", "2.0.0", false; "cargo_lte1_excludes_2.0.0")]
#[test_case(Fetcher::Cargo, "<1.2.3", "1.2.2", true; "cargo_lt1.2.3_includes_1.2.2")]
#[test_case(Fetcher::Cargo, "<1.2.3", "1.2.4", false; "cargo_lt1.2.3_excludes_1.2.4")]
#[test_case(Fetcher::Cargo, "<1.2", "1.1.9", true; "cargo_lt1.2_includes_1.1.9")]
#[test_case(Fetcher::Cargo, "<1.2", "1.2.0", false; "cargo_lt1.2_excludes_1.2.0")]
#[test_case(Fetcher::Cargo, "<1", "0.9.9", true; "cargo_lt1_includes_0.9.9")]
#[test_case(Fetcher::Cargo, "<1", "1.2.3", false; "cargo_lt1_excludes_1.2.3")]
#[test_case(Fetcher::Cargo, "~1.2.3", "1.2.4", true; "cargo_tilde1.2.3_includes_1.2.4")]
#[test_case(Fetcher::Cargo, "~1.2.3", "1.3.0", false; "cargo_tilde1.2.3_excludes_1.3.0")]
#[test_case(Fetcher::Cargo, "~1.2", "1.2.0", true; "cargo_tilde1.2_includes_1.2.0")]
#[test_case(Fetcher::Cargo, "~1.2", "1.3.0", false; "cargo_tilde1.2_excludes_1.3.0")]
#[test_case(Fetcher::Cargo, "~1", "1.0.0", true; "cargo_tilde1_includes_1.0.0")]
#[test_case(Fetcher::Cargo, "~1", "2.0.0", false; "cargo_tilde1_excludes_2.0.0")]
#[test_case(Fetcher::Cargo, "^1.2.3", "1.9.9", true; "cargo_caret1.2.3_includes_1.9.9")]
#[test_case(Fetcher::Cargo, "^1.2.3", "2.0.0", false; "cargo_caret1.2.3_excludes_2.0.0")]
#[test_case(Fetcher::Cargo, "^0.2.3", "0.2.9", true; "cargo_caret0.2.3_includes_0.2.9")]
#[test_case(Fetcher::Cargo, "^0.2.3", "0.3.0", false; "cargo_caret0.2.3_excludes_0.3.0")]
#[test_case(Fetcher::Cargo, "^0.0.3", "0.0.3", true; "cargo_caret0.0.3_includes_0.0.3")]
#[test_case(Fetcher::Cargo, "^0.0.3", "0.0.4", false; "cargo_caret0.0.3_excludes_0.0.4")]
#[test_case(Fetcher::Cargo, "^1.2", "1.9.9", true; "cargo_caret1.2_includes_1.9.9")]
#[test_case(Fetcher::Cargo, "^1.2", "2.0.0", false; "cargo_caret1.2_excludes_2.0.0")]
#[test_case(Fetcher::Cargo, "^0.2", "0.2.9", true; "cargo_caret0.2_includes_0.2.9")]
#[test_case(Fetcher::Cargo, "^0.2", "0.3.0", false; "cargo_caret0.2_excludes_0.3.0")]
#[test_case(Fetcher::Cargo, "^0.0", "0.0.0", true; "cargo_caret0.0_includes_0.0.0")]
#[test_case(Fetcher::Cargo, "^0.0", "0.1.0", false; "cargo_caret0.0_excludes_0.1.0")]
#[test_case(Fetcher::Cargo, "^1", "1.9.9", true; "cargo_caret1_includes_1.9.9")]
#[test_case(Fetcher::Cargo, "^1", "2.0.0", false; "cargo_caret1_excludes_2.0.0")]
#[test_case(Fetcher::Cargo, "1.2.*", "1.2.3", true; "cargo_1.2.wc_includes_1.2.3")]
#[test_case(Fetcher::Cargo, "1.2.*", "1.3.0", false; "cargo_1.2.wc_excludes_1.3.0")]
#[test_case(Fetcher::Cargo, "1.*", "1.2.3", true; "cargo_1.wc_includes_1.2.3")]
#[test_case(Fetcher::Cargo, "1.*", "2.0.0", false; "cargo_1.wc_excludes_2.0.0")]
#[test_case(Fetcher::Cargo, "1.*.*", "1.2.3", true; "cargo_1.wc.wc_includes_1.2.3")]
#[test_case(Fetcher::Cargo, "1.*.*", "2.0.0", false; "cargo_1.wc.wc_excludes_2.0.0")]
#[test]
fn test_parse_and_compare(fetcher: Fetcher, req: &str, ver: &str, expected: bool) {
    let req = Constraints::parse(fetcher, req).expect("should parse constraint");
    let ver = Revision::from(ver);
    assert_eq!(req.compare_all(fetcher, &ver), expected);
}
